import { Injectable } from '@nestjs/common';
import { GoogleSpreadsheet } from 'google-spreadsheet';
import { JWT } from 'google-auth-library';

@Injectable()
export class GoogleSheetService {
  private doc: GoogleSpreadsheet;

  constructor(
    private readonly spreadsheetId?: string,
    private readonly sheetName?: string,
  ) {}

  async initialize(): Promise<void> {
    try {
      const serviceAccountAuth = new JWT({
        email: process.env.GOOGLE_SHEET_EMAIL,
        key: process.env.GOOGLE_SHEET_PRIVATE_KEY.split(String.raw`\n`).join('\n'), // X·ª≠ l√Ω xu·ªëng d√≤ng
        // apiKey: process.env.GOOGLE_SHEET_API_KEY,
        scopes: ['https://www.googleapis.com/auth/spreadsheets', 'https://www.googleapis.com/auth/drive', 'https://www.googleapis.com/auth/drive.readonly', 'https://www.googleapis.com/auth/drive.file'],
      });

      if (this.spreadsheetId) {
        // S·ª≠ d·ª•ng Google Sheet hi·ªán c√≥
        this.doc = new GoogleSpreadsheet(this.spreadsheetId, serviceAccountAuth);

        await this.doc.loadInfo(); // T·∫£i th√¥ng tin b·∫£ng
      } else if (this.sheetName) {
        // T·∫°o Google Sheet m·ªõi n·∫øu kh√¥ng c√≥ `spreadsheetId`
        this.doc = await GoogleSpreadsheet.createNewSpreadsheetDocument(serviceAccountAuth, { title: this.sheetName });
        // this.doc.setPublicAccessLevel('commenter');
        await this.doc.share(process.env.GMAIL_SHARE_SHEET, {
          role: 'writer',
        });
        console.log(`New spreadsheet created with ID: ${this.doc.spreadsheetId}`);
      } else {
        throw new Error('Either spreadsheetId or sheetName must be provided.');
      }
    } catch (error) {
      console.log('üöÄ ~ GoogleSheetService ~ initialize ~ error:', error);
    }
  }

  // Thi·∫øt l·∫≠p header cho sheet
  async initializeSheetHeaders(headers: string[], sheetIndex = 0): Promise<void> {
    try {
      await this.doc.loadInfo();
      let sheet = this.doc.sheetsByIndex[sheetIndex];
      if (!sheet) {
        sheet = await this.doc.addSheet();
      }
      await sheet.setHeaderRow(headers);
    } catch (error) {
      console.error('Error while initializing sheet headers:', error.message);
      throw error;
    }
  }

  // Th√™m m·ªôt d√≤ng m·ªõi v√†o sheet
  async appendRow(sheetIndex = 0, rowData: Record<string, any>): Promise<void> {
    await this.doc.loadInfo();
    let sheet = this.doc.sheetsByIndex[sheetIndex];
    if (!sheet) {
      sheet = await this.doc.addSheet();
    }

    // L·∫•y danh s√°ch header sau khi ƒë·∫£m b·∫£o ƒë√£ c√≥ header
    const headers = sheet.headerValues;

    // X√¢y d·ª±ng ƒë·ªëi t∆∞·ª£ng d·ªØ li·ªáu kh·ªõp v·ªõi header
    const formattedRow = headers.reduce((obj, header) => {
      obj[header] = rowData[header] ?? ''; // G√°n gi√° tr·ªã ho·∫∑c ƒë·ªÉ tr·ªëng n·∫øu kh√¥ng c√≥
      return obj;
    }, {});

    await sheet.addRow(formattedRow);
  }

  // Add rows
  async appendRows(sheetIndex: number, rows: any[][]) {
    await this.doc.loadInfo();
    const sheet = this.doc.sheetsByIndex[sheetIndex];

    if (!sheet) {
      throw new Error(`Sheet with index ${sheetIndex} not found`);
    }

    // Th√™m nhi·ªÅu h√†ng trong m·ªôt l·∫ßn
    await sheet.addRows(rows);
  }

  // L·∫•y d·ªØ li·ªáu t·ª´ sheet
  async getSheetData(sheetIndex = 0): Promise<any[]> {
    await this.doc.loadInfo();
    const sheet = this.doc.sheetsByIndex[sheetIndex];
    return await sheet.getRows();
  }

  // C·∫≠p nh·∫≠t m·ªôt d√≤ng d·ª±a tr√™n index
  async updateRow(sheetIndex = 0, rowIndex: number, rowData: any): Promise<void> {
    await this.doc.loadInfo();
    const sheet = this.doc.sheetsByIndex[sheetIndex];
    const rows = await sheet.getRows();
    const row = rows[rowIndex];
    Object.assign(row, rowData);
    await row.save();
  }

  // X√≥a m·ªôt d√≤ng d·ª±a tr√™n index
  async deleteRow(sheetIndex = 0, rowIndex: number): Promise<void> {
    await this.doc.loadInfo();
    const sheet = this.doc.sheetsByIndex[sheetIndex];
    const rows = await sheet.getRows();
    const row = rows[rowIndex];
    await row.delete();
  }

  async getLinkSheet() {
    await this.doc.loadInfo();
    return `https://docs.google.com/spreadsheets/d/${this.doc.spreadsheetId}/edit`;
  }
}
